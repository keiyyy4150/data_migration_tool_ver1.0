Option Explicit

'==============================
' ユーザー操作：エンコード選択
'==============================
Public Sub ChooseEncoding()
    Dim s As String
    s = InputBox("読み込み・書き出しのエンコードを指定してください。" & vbCrLf & _
                 "AUTO / UTF-8 / Shift_JIS / UTF-16LE", _
                 "Encoding Mode", IIf(Len(CurrentEncodingMode) = 0, "AUTO", CurrentEncodingMode))
    If s = "False" Then Exit Sub
    s = UCase$(Trim$(s))
    Select Case s
        Case "AUTO", "UTF-8", "UTF8": CurrentEncodingMode = IIf(s = "UTF8", "UTF-8", s)
        Case "SHIFT_JIS", "SJIS", "CP932": CurrentEncodingMode = "SHIFT_JIS"
        Case "UTF-16LE", "UTF16LE", "UNICODE": CurrentEncodingMode = "UTF-16LE"
        Case Else: CurrentEncodingMode = "AUTO"
    End Select
    EnsureFolder ThisWorkbook.Path & "\" & LOG_FOLDER & "\"
    WriteLog "INFO", "Encoding set: " & CurrentEncodingMode
    MsgBox "Encoding Mode: " & CurrentEncodingMode, vbInformation
End Sub

'==============================
' Import：CSV読込→JOIN→Masterへ無加工貼付
'==============================
Public Sub ImportFiles()
    On Error GoTo EH
    Dim tStart As Date: tStart = Now
    If Len(CurrentEncodingMode) = 0 Then CurrentEncodingMode = "AUTO"
    If Len(CurrentMappingTableName) = 0 Then UsePipelineMain

    ' 1) Mapping 読込
    If Not ReadMappingFromTableName(CurrentMappingTableName) Then
        WriteLog "ERROR", "Mapping read failed"
        MsgBox "Mappingの読み取りに失敗しました。", vbCritical
        Exit Sub
    End If

    ' 2) CSV 読込
    Dim importPath As String: importPath = ThisWorkbook.Path & "\" & IMPORT_FOLDER & "\"
    EnsureFolder ThisWorkbook.Path & "\" & LOG_FOLDER & "\"
    WriteLog "INFO", "ImportFiles: start / Encoding=" & CurrentEncodingMode & " / MappingTable=" & CurrentMappingTableName

    Set TableData = CreateObject("Scripting.Dictionary")
    If Not LoadAllCsv(importPath, GetMappingTableNames(), TableData) Then
        WriteLog "ERROR", "LoadAllCsv failed"
        Exit Sub
    End If

    ' 3) キー索引（1:1）
    Set KeyIndex = CreateObject("Scripting.Dictionary")
    BuildKeyIndexes KeyIndex

    ' 4) ベーステーブル決定 → 無加工JOIN（1:N行複製）
    Dim baseTbl As String: baseTbl = PickBaseTableName()
    RawJoined = BuildJoinedRaw(baseTbl)
    HasRaw = True: IsProcessed = False

    ' 5) Masterへ貼付
    Dim lo As ListObject: Set lo = ThisWorkbook.ListObjects(CurrentMasterTableName)
    PasteToMasterByTable lo, RawJoined

    WriteLog "INFO", "ImportFiles: done / rows=" & UBound(RawJoined, 1) & " / cols=" & UBound(RawJoined, 2) & _
                     " / elapsed=" & Format(Now - tStart, "hh:nn:ss")
    MsgBox "ファイルインポート完了（無加工をMasterへ反映）", vbInformation
    Exit Sub
EH:
    WriteLog "ERROR", "ImportFiles error: " & Err.Number & " " & Err.Description
    MsgBox "ImportFilesでエラー: " & Err.Description, vbCritical
End Sub

'==============================
' Process：加工適用（VALUE/CONCAT/EXPR）
'==============================
Public Sub ProcessData()
    On Error GoTo EH
    Dim tStart As Date: tStart = Now
    If Not HasRaw Then
        MsgBox "先に『ファイルインポート』を実行してください。", vbExclamation
        Exit Sub
    End If
    If Len(CurrentMappingTableName) = 0 Then UsePipelineMain

    If Not ReadMappingFromTableName(CurrentMappingTableName) Then
        WriteLog "ERROR", "Mapping read failed in ProcessData"
        MsgBox "Mappingの読み取りに失敗しました。", vbCritical
        Exit Sub
    End If

    Dim procArr As Variant
    procArr = ApplyTransformSmart(RawJoined)

    Dim lo As ListObject: Set lo = ThisWorkbook.ListObjects(CurrentMasterTableName)
    PasteToMasterByTable lo, procArr
    IsProcessed = True

    WriteLog "INFO", "ProcessData: done / rows=" & UBound(procArr, 1) & " / cols=" & UBound(procArr, 2) & _
                     " / elapsed=" & Format(Now - tStart, "hh:nn:ss")
    MsgBox "データ加工完了（Masterへ反映）", vbInformation
    Exit Sub
EH:
    WriteLog "ERROR", "ProcessData error: " & Err.Number & " " & Err.Description
    MsgBox "ProcessDataでエラー: " & Err.Description, vbCritical
End Sub

'==============================
' Clear：Masterクリア＆中間破棄
'==============================
Public Sub ClearData()
    On Error Resume Next
    Dim lo As ListObject: Set lo = ThisWorkbook.ListObjects(CurrentMasterTableName)
    If Not lo Is Nothing Then If Not lo.DataBodyRange Is Nothing Then lo.DataBodyRange.ClearContents
    On Error GoTo 0

    HasRaw = False: IsProcessed = False
    Erase RawJoined: Erase Join_BaseRowIdx
    Join_BaseTableName = ""
    Set TableData = Nothing: Set KeyIndex = Nothing

    WriteLog "INFO", "ClearData: Master cleared & memory freed"
    MsgBox "初期化しました。", vbInformation
End Sub

'==============================
' Masterへ貼付（テーブル名で）
'==============================
Public Sub PasteToMasterByTable(masterTbl As ListObject, dataArr As Variant)
    Dim rows As Long, cols As Long
    rows = UBound(dataArr, 1): cols = UBound(dataArr, 2)
    If masterTbl.ListColumns.Count <> cols Then
        WriteLog "ERROR", "Master columns mismatch. Master=" & masterTbl.ListColumns.Count & " Mapping=" & cols
        MsgBox "Masterテーブルの列数がMappingの出力列数と一致しません。", vbCritical
        Exit Sub
    End If
    Dim newRange As Range
    Set newRange = masterTbl.HeaderRowRange.Resize(rows + 1, cols)
    masterTbl.Resize newRange
    masterTbl.DataBodyRange.Value = dataArr
End Sub