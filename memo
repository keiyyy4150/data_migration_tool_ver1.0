Option Explicit

Public Const IMPORT_FOLDER As String = "inportFiles"
Public Const EXPORT_FOLDER As String = "exportFiles"

' 読み込んだデータ（キー: テーブル名, 値: 2次元配列）
Public ImportedTables As Object
Public IsImported As Boolean

'=======================
' ファイルインポート
'=======================
Sub ImportFiles()
    Dim wsSet As Worksheet, wsMap As Worksheet
    Dim fPath As String, tblName As String, fileName As String
    Dim i As Long
    
    Set wsSet = ThisWorkbook.Sheets("Setting")
    Set wsMap = ThisWorkbook.Sheets("Mapping")
    fPath = ThisWorkbook.Path & "\" & IMPORT_FOLDER & "\"
    
    Set ImportedTables = CreateObject("Scripting.Dictionary")
    IsImported = False
    
    ' Settingシートからテーブル情報を取得
    i = 2
    Do While wsSet.Cells(i, 1).Value <> ""
        tblName = wsSet.Cells(i, 1).Value
        fileName = wsSet.Cells(i, 2).Value
        
        ' ファイル存在チェック
        If Dir(fPath & fileName) = "" Then
            MsgBox "ファイルが不足しています: " & fileName, vbCritical
            Exit Sub
        End If
        
        ' CSV読み込み
        ImportedTables(tblName) = ReadCSVtoArray(fPath & fileName)
        
        i = i + 1
    Loop
    
    MsgBox "インポート完了", vbInformation
    IsImported = True
End Sub

'=======================
' データ加工（JOIN + 型変換）
'=======================
Sub ProcessData()
    If Not IsImported Then
        MsgBox "先にファイルインポートを実行してください", vbExclamation
        Exit Sub
    End If
    
    Dim wsMap As Worksheet, wsSet As Worksheet, wsWork As Worksheet
    Dim outArr() As Variant
    Dim rowCnt As Long, colCnt As Long
    Dim keyCol As String, keyIdx1 As Long, keyIdx2 As Long
    Dim i As Long, j As Long
    Dim t1(), t2()
    
    Set wsMap = ThisWorkbook.Sheets("Mapping")
    Set wsSet = ThisWorkbook.Sheets("Setting")
    Set wsWork = ThisWorkbook.Sheets("Work")
    
    ' 仮：今回はtable1とtable2のJOINを前提に
    t1 = ImportedTables("table1")
    t2 = ImportedTables("table2")
    
    ' 出力配列サイズ
    rowCnt = UBound(t1, 1) - 1 ' ヘッダーを除く
    colCnt = Application.WorksheetFunction.CountA(wsMap.Range("A:A"))
    ReDim outArr(1 To rowCnt, 1 To colCnt)
    
    ' キー列名取得（仮: SettingのC列）
    keyCol = wsSet.Cells(2, 3).Value
    keyIdx1 = FindColumnIndex(t1, keyCol)
    keyIdx2 = FindColumnIndex(t2, keyCol)
    
    ' マッピングに沿ってデータ作成
    For i = 2 To rowCnt + 1
        For j = 1 To colCnt
            Dim srcVal As String
            Dim srcTbl As String
            Dim srcColName As String
            Dim colType As String
            Dim logic As String
            
            colType = wsMap.Cells(j + 1, 2).Value
            logic = wsMap.Cells(j + 1, 3).Value
            
            ' D列以降で該当テーブルとカラムを探す
            Dim k As Long
            For k = 4 To wsMap.Cells(1, wsMap.Columns.Count).End(xlToLeft).Column
                srcTbl = wsMap.Cells(1, k).Value
                srcColName = wsMap.Cells(j + 1, k).Value
                If srcColName <> "" Then
                    If srcTbl = "table1" Then
                        srcVal = t1(i, FindColumnIndex(t1, srcColName))
                    ElseIf srcTbl = "table2" Then
                        ' table2のキーに一致する行を探す
                        Dim matchRow As Long
                        matchRow = FindRowByKey(t2, keyIdx2, t1(i, keyIdx1))
                        If matchRow > 0 Then
                            srcVal = t2(matchRow, FindColumnIndex(t2, srcColName))
                        End If
                    End If
                End If
            Next
            
            ' 型変換
            Select Case UCase(colType)
                Case "NUMBER"
                    If IsNumeric(srcVal) Then srcVal = CLng(srcVal)
                Case "DATE"
                    If IsDate(srcVal) Then srcVal = Format(srcVal, "yyyy/mm/dd")
                Case Else
                    srcVal = CStr(srcVal)
            End Select
            
            ' 加工ロジック（例: "◯→はい;×→いいえ"）
            If logic <> "" Then
                Dim rules() As String, r As Long
                rules = Split(logic, ";")
                For r = LBound(rules) To UBound(rules)
                    Dim pair() As String
                    pair = Split(rules(r), "→")
                    If UBound(pair) = 1 Then
                        srcVal = Replace(srcVal, pair(0), pair(1))
                    End If
                Next
            End If
            
            outArr(i - 1, j) = srcVal
        Next
    Next
    
    ' Workシートのテーブルに反映
    Dim tbl As ListObject
    Set tbl = wsWork.ListObjects(1)
    tbl.DataBodyRange.ClearContents
    tbl.Resize tbl.Range.Resize(rowCnt + 1, colCnt)
    tbl.DataBodyRange.Value = outArr
    
    MsgBox "データ加工完了（JOIN + 型変換）", vbInformation
End Sub

'=======================
' 補助関数
'=======================
Function ReadCSVtoArray(filePath As String) As Variant
    Dim fs As Object, ts As Object
    Dim text As String
    Dim lines As Variant
    Dim i As Long
    
    Set fs = CreateObject("Scripting.FileSystemObject")
    Set ts = fs.OpenTextFile(filePath, 1, False, -1)
    text = ts.ReadAll
    ts.Close
    
    lines = Split(text, vbCrLf)
    
    Dim result() As Variant
    Dim maxCols As Long
    maxCols = 0
    For i = LBound(lines) To UBound(lines)
        Dim tmp() As String
        tmp = Split(lines(i), ",")
        If UBound(tmp) > maxCols Then maxCols = UBound(tmp)
    Next
    
    ReDim result(1 To UBound(lines) + 1, 1 To maxCols + 1)
    For i = LBound(lines) To UBound(lines)
        Dim arr() As String
        arr = Split(lines(i), ",")
        Dim j As Long
        For j = LBound(arr) To UBound(arr)
            result(i + 1, j + 1) = arr(j)
        Next
    Next
    
    ReadCSVtoArray = result
End Function

Function FindColumnIndex(arr As Variant, colName As String) As Long
    Dim c As Long
    For c = 1 To UBound(arr, 2)
        If arr(1, c) = colName Then
            FindColumnIndex = c
            Exit Function
        End If
    Next
    FindColumnIndex = 0
End Function

Function FindRowByKey(arr As Variant, keyIdx As Long, keyVal As String) As Long
    Dim r As Long
    For r = 2 To UBound(arr, 1)
        If arr(r, keyIdx) = keyVal Then
            FindRowByKey = r
            Exit Function
        End If
    Next
    FindRowByKey = 0
End Function