いいですね！そのまま社内規約として配れたり、リポジトリに置けるように「規約本文」「チェックリスト」「関数テンプレ」の3点セットで作りました。必要に応じて社名や責任者名を入れて使ってください。

⸻

PowerShell コーディングルール（テンプレート）

版: v0.1 / 適用範囲: PowerShell 7.x（Core）および Windows PowerShell 5.1（互換が必要な場合明記）
対象: スクリプト（.ps1）、関数モジュール（.psm1）、バイナリ以外のモジュール、CI/CD 用スクリプト

1. 目的
	•	可読性・保守性・安全性・再利用性の向上
	•	自動化された静的解析・テスト（PSScriptAnalyzer / Pester）との整合

2. 命名規則
	•	関数: 動詞-名詞（Approved Verbs 準拠例: Get, Set, New, Test, Invoke）
例: Get-UserReport, Invoke-DataMigration
	•	変数: camelCase（スコープ接頭辞は必要時のみ: $script:cache）
	•	定数: UPPER_SNAKE_CASE（Set-StrictMode -Version Latest 下で readonly 推奨）
	•	パラメータ: PascalCase（例: -InputPath, -WhatIf）
	•	ファイル/モジュール: PascalCase（例: DataDiff.Tools.psm1）
	•	エイリアス: 作成禁止。使用も原則禁止（Select-Object を select と書かない）。

3. 書式・スタイル
	•	インデント: スペース 4。タブ禁止
	•	行長: 120 桁目安（超過はパイプ位置で改行）
	•	波括弧: 開きは同一行、閉じは改行後
	•	パイプライン: 行末パイプ、次行 4 スペースインデント
	•	比較: 型に応じて -eq/-ne/-lt/...、ワイルドカードは -like、正規表現は -match
	•	文字列: 変数展開が必要→二重引用符、不要→単引用符
	•	ハッシュ/配列: 末尾カンマOK（差分見やすさ優先）

4. 関数設計
	•	1 関数 1 責務。副作用を最小化。
	•	CmdletBinding を付与し、SupportsShouldProcess を必要時に有効化（-WhatIf/-Confirm 対応）。
	•	入力/出力: 文字列ではなくオブジェクトを入出力。Write-Output 明示。Write-Host 禁止。
	•	パラメータ: Mandatory, Position, ValueFromPipeline, ValidateSet/ValidatePattern/ValidateRange, HelpMessage を適切に付与。
	•	戻り値: 例外は例外で返し、エラー時に部分的成功のオブジェクトを返さない。

5. コメントとヘルプ
	•	すべての公開関数にコメントベースドヘルプを付与（SYNOPSIS, DESCRIPTION, PARAMETERS, EXAMPLES, INPUTS, OUTPUTS, NOTES, LINK）。
	•	1～3 行の要約コメントを関数定義直前に置く。
	•	TODO コメントは禁止。Issue/タスク管理に記録。

6. エラー処理
	•	終端エラーを原則使用：$ErrorActionPreference = 'Stop' を関数冒頭でローカルに設定。
	•	try { ... } catch [具体例外] { ... } finally { ... } を使用。
	•	throw で意味のあるメッセージと ErrorRecord を。Write-Error は進行継続が妥当なときのみ。
	•	コマンドレット呼び出しには -ErrorAction Stop と -ErrorVariable ev を併用可。

7. ロギング
	•	進捗/情報: Write-Verbose / Write-Information
	•	警告: Write-Warning
	•	エラー: 例外（throw）を第一選択
	•	ログレベルは -Verbose, $InformationPreference で制御可能に。

8. セキュリティ
	•	資格情報の平文禁止。[PSCredential]、SecretManagement、環境変数を利用。
	•	パス結合: Join-Path、ハードコード禁止。
	•	入力検証: Validate* 属性必須、危険な既定値は設定しない。
	•	コード署名: 配布用スクリプト/モジュールは署名。実行ポリシーに依存しない運用を検討。
	•	外部コマンド: Start-Process -NoNewWindow -Wait などで引数を明示的に。

9. パフォーマンス
	•	パイプの大量アイテム処理は ForEach-Object -Parallel（要 PS7）や foreach を使い分け。
	•	不要なサブエクスプリッション $() と文字列補間を避ける。
	•	Measure-Command や軽微なベンチを PR で提示。

10. テスト・静的解析・CI
	•	Pester: すべての公開関数にユニットテスト。Arrange/Act/Assert 構成。
	•	PSScriptAnalyzer: Invoke-ScriptAnalyzer を CI で必須。Settings.PSSA.psd1 にルールセット。
	•	コードカバレッジ 目標値（例: 80%）。閾値未満は PR をブロック。

11. 互換性
	•	PowerShell 7 を基準。Windows PowerShell 5.1 が必要な場合は関数単位で #requires -Version 5.1 を明記、条件分岐で代替 API を使用。

12. バージョニング/配布
	•	モジュールは SemVer（Major.Minor.Patch）。
	•	module manifest（.psd1）に CompatiblePSEditions, PowerShellVersion, FunctionsToExport を明示。
	•	変更履歴は CHANGELOG.md（Keep a Changelog 準拠）。

13. フォルダ構成（例）

repo-root/
├─ src/
│  ├─ ModuleName/
│  │  ├─ ModuleName.psd1
│  │  ├─ ModuleName.psm1
│  │  └─ Public/ Private/ (関数 .ps1 分割)
├─ tests/ (Pester)
├─ tools/  (PSScriptAnalyzer 設定など)
├─ examples/
├─ .editorconfig
├─ Settings.PSSA.psd1
└─ README.md / CONTRIBUTING.md / CHANGELOG.md


⸻

付録A：PR前セルフチェックリスト（貼って使う）
	•	Approved Verb を使った 動詞-名詞 形式の関数名になっている
	•	すべての公開関数にコメントベースドヘルプがある（使用例含む）
	•	CmdletBinding() と適切な Parameter() 属性を付与
	•	SupportsShouldProcess 実装済み（破壊的操作のみ）
	•	$ErrorActionPreference = 'Stop' と try/catch を実装
	•	出力はオブジェクトで、Write-Host 不使用
	•	入力検証（ValidateSet/ValidatePattern/ValidateRange）を実装
	•	ログは Write-Verbose/Information/Warning を使用
	•	PSScriptAnalyzer エラー/警告 0
	•	Pester テストに合格、カバレッジ >= 80%
	•	機微情報のハードコードなし、パスは Join-Path
	•	行長 <= 120、スペース 4 インデント
	•	例外/エラー メッセージが具体的で再現手順を示す

⸻

付録B：関数テンプレ（コピペ用）

function Get-ExampleItem {
<#
.SYNOPSIS
  〇〇を取得します。

.DESCRIPTION
  指定条件に一致するアイテムを取得してオブジェクトで返します。

.PARAMETER Name
  アイテム名。ValidateSet で事前定義可能です。

.PARAMETER Path
  参照するルートパス。既定はカレント。

.EXAMPLE
  PS> Get-ExampleItem -Name Foo -Path C:\Data

.INPUTS
  System.String

.OUTPUTS
  Example.Item

.NOTES
  Owner: ＜責任者名／チーム＞ / Since: 2025-08-28
.LINK
  https://＜社内Wiki等＞
#>
    [CmdletBinding(SupportsShouldProcess = $false, ConfirmImpact='Low')]
    param(
        [Parameter(Mandatory, Position=0)]
        [ValidateNotNullOrEmpty()]
        [string]$Name,

        [Parameter(Mandatory=$false)]
        [ValidateScript({ Test-Path $_ })]
        [string]$Path = (Get-Location).Path
    )

    begin {
        $ErrorActionPreference = 'Stop'
    }
    process {
        try {
            # メインロジック
            $item = [pscustomobject]@{
                Name = $Name
                Path = (Resolve-Path $Path).Path
                Timestamp = [datetime]::UtcNow
            }
            Write-Output $item
        }
        catch [System.IO.IOException] {
            throw
        }
        catch {
            $msg = "Get-ExampleItem で予期せぬエラー: {0}" -f $_.Exception.Message
            throw (New-Object System.Exception($msg, $_.Exception))
        }
    }
}


⸻

付録C：スクリプトヘッダ（.ps1 用）

#requires -Version 7.2
<# 
.SYNOPSIS
  ＜スクリプト概要＞
.DESCRIPTION
  ＜もう少し詳しい説明＞
.PARAMETER InputPath
  ＜説明＞
.EXAMPLE
  PS> .\Do-Thing.ps1 -InputPath ./data
.NOTES
  Author: ＜名前＞
  Version: 1.0.0
  Updated: 2025-08-28
#>

param(
  [Parameter(Mandatory)]
  [ValidateScript({ Test-Path $_ })]
  [string]$InputPath
)

Set-StrictMode -Version Latest
$PSStyle.OutputRendering = 'Ansi'  # Windows Terminal などで装飾を有効に

$ErrorActionPreference = 'Stop'
try {
  # 実処理
}
catch {
  Write-Error -Message ("Do-Thing.ps1 failed: {0}" -f $_.Exception.Message)
  exit 1
}


⸻

付録D：PSScriptAnalyzer 設定（雛形 Settings.PSSA.psd1）

@{
    ExcludeRules = @(
        'PSUseShouldProcessForStateChangingFunctions' # 必要に応じて
    )
    IncludeRules = @(
        'PSAvoidUsingWriteHost',
        'PSUseApprovedVerbs',
        'PSAvoidGlobalVars',
        'PSUseConsistentIndentation',
        'PSPossibleIncorrectComparisonWithNull',
        'PSAlignAssignmentStatement',
        'PSUseConsistentWhitespace'
    )
    Rules = @{
        PSUseConsistentIndentation = @{ Enable = $true; IndentationSize = 4; Kind = 'space' }
        PSUseConsistentWhitespace = @{ Enable = $true }
    }
}


⸻

必要なら、このテンプレを社内Wiki（Markdown）とリポジトリ雛形（src/, tests/, tools/）に展開する初期コミット用のファイル一式も作れます。
「Windows PowerShell 5.1 必須」「Azure DevOps Pipelines で実行」などの運用前提があれば、それに合わせて微調整した版もすぐ出します。